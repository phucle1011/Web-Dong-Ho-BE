const ProductAttributeModel = require('../../models/productAttributesModel');
const ProductVariantAttributeValuesModel  = require('../../models/productVariantAttributeValuesModel');

const { Op } = require('sequelize');

class ProductAttributeController {
  // L·∫•y danh s√°ch thu·ªôc t√≠nh v·ªõi t√¨m ki·∫øm v√† ph√¢n trang

static async getAll(req, res) {
  const { searchTerm = '', page = 1, limit = 10 } = req.query;
  const pageNumber = parseInt(page);
  const pageSize = parseInt(limit);
  const offset = (pageNumber - 1) * pageSize;

  try {
    const whereClause = searchTerm
      ? {
          name: {
            [Op.like]: `%${searchTerm}%`,
          },
        }
      : {};

    const { rows: attributes, count: totalItems } = await ProductAttributeModel.findAndCountAll({
      where: whereClause,
      limit: pageSize,
      offset,
      order: [['created_at', 'DESC']],
    });

    // üîç L·∫•y danh s√°ch id c·ªßa attributes
    const attributeIds = attributes.map((attr) => attr.id);

    // üîç T√¨m c√°c product_attribute_id ƒëang ƒë∆∞·ª£c d√πng trong b·∫£ng value
    const referenced = await ProductVariantAttributeValuesModel.findAll({
      attributes: ['product_attribute_id'],
      where: {
        product_attribute_id: {
          [Op.in]: attributeIds,
        },
      },
      group: ['product_attribute_id'],
      raw: true,
    });

    const referencedIds = referenced.map((r) => r.product_attribute_id);

    // ‚úÖ G·∫Øn isReferenced v√†o m·ªói attribute
    const enrichedAttributes = attributes.map((attr) => ({
      ...attr.toJSON(),
      isReferenced: referencedIds.includes(attr.id),
    }));

    const totalPages = Math.ceil(totalItems / pageSize);

    return res.status(200).json({
      status: 200,
      message: 'L·∫•y danh s√°ch thu·ªôc t√≠nh th√†nh c√¥ng',
      data: enrichedAttributes,
      pagination: {
        totalItems,
        totalPages,
        currentPage: pageNumber,
        perPage: pageSize,
      },
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch thu·ªôc t√≠nh:', error);
    return res.status(500).json({
      status: 500,
      message: 'L·ªói server khi l·∫•y danh s√°ch thu·ªôc t√≠nh.',
    });
  }
}


  // T·∫°o m·ªõi thu·ªôc t√≠nh
  static async create(req, res) {
    let { name } = req.body;

    if (!name) {
      return res.status(400).json({
        status: 400,
        message: 'T√™n thu·ªôc t√≠nh l√† b·∫Øt bu·ªôc.',
      });
    }

    const normalizedName = name.trim().replace(/\s+/g, ' ');

    try {
      const existingAttribute = await ProductAttributeModel.findOne({
        where: { name: normalizedName },
      });

      if (existingAttribute) {
        return res.status(409).json({
          status: 409,
          message: 'T√™n thu·ªôc t√≠nh ƒë√£ t·ªìn t·∫°i.',
        });
      }

      const newAttribute = await ProductAttributeModel.create({
        name: normalizedName,
      });

      res.status(201).json({
        status: 201,
        message: 'Th√™m thu·ªôc t√≠nh th√†nh c√¥ng.',
        data: newAttribute,
      });
    } catch (error) {
      console.error('L·ªói khi th√™m thu·ªôc t√≠nh:', error);
      res.status(500).json({
        status: 500,
        message: 'L·ªói server khi th√™m thu·ªôc t√≠nh.',
      });
    }
  }

  // L·∫•y thu·ªôc t√≠nh theo ID
  static async getById(req, res) {
    const { id } = req.params;
    try {
      const attribute = await ProductAttributeModel.findByPk(id);
      if (!attribute) {
        return res.status(404).json({
          status: 404,
          message: 'Thu·ªôc t√≠nh kh√¥ng t·ªìn t·∫°i.',
        });
      }
      res.status(200).json({
        status: 200,
        data: attribute,
      });
    } catch (error) {
      console.error('L·ªói khi l·∫•y thu·ªôc t√≠nh:', error);
      res.status(500).json({
        status: 500,
        message: 'L·ªói server.',
      });
    }
  }

  // C·∫≠p nh·∫≠t thu·ªôc t√≠nh
  static async update(req, res) {
    const { id } = req.params;
    const { name } = req.body;

    if (!name) {
      return res.status(400).json({
        status: 400,
        message: 'T√™n thu·ªôc t√≠nh l√† b·∫Øt bu·ªôc.',
      });
    }

    try {
      const attribute = await ProductAttributeModel.findByPk(id);
      if (!attribute) {
        return res.status(404).json({
          status: 404,
          message: 'Thu·ªôc t√≠nh kh√¥ng t·ªìn t·∫°i.',
        });
      }

      attribute.name = name;
      await attribute.save();

      res.status(200).json({
        status: 200,
        message: 'C·∫≠p nh·∫≠t thu·ªôc t√≠nh th√†nh c√¥ng.',
        data: attribute,
      });
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t thu·ªôc t√≠nh:', error);
      res.status(500).json({
        status: 500,
        message: 'L·ªói server khi c·∫≠p nh·∫≠t thu·ªôc t√≠nh.',
      });
    }
  }

  // Xo√° thu·ªôc t√≠nh
  static async delete(req, res) {
    const { id } = req.params;

    try {
      const attribute = await ProductAttributeModel.findByPk(id);
      if (!attribute) {
        return res.status(404).json({
          status: 404,
          message: 'Thu·ªôc t√≠nh kh√¥ng t·ªìn t·∫°i.',
        });
      }

      await attribute.destroy();

      res.status(200).json({
        status: 200,
        message: `Xo√° thu·ªôc t√≠nh "${attribute.name}" th√†nh c√¥ng.`,
      });
    } catch (error) {
      console.error('L·ªói khi xo√° thu·ªôc t√≠nh:', error);

      res.status(500).json({
        status: 500,
        message: 'L·ªói server khi xo√° thu·ªôc t√≠nh.',
      });
    }
  }
}

module.exports = ProductAttributeController;
